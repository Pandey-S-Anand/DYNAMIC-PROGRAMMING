//Bruteforce Approach

class Solution {
    public int maxProfit(int[] prices, int fee) {
        return getMaxProfitWithFee(1, prices, 1, fee);
    }

    private int getMaxProfitWithFee(int day, int[] prices, int canBuy, int txnFee) {
        if (day > prices.length) {
            return 0;
        }

        if (canBuy == 1) {
            int buyStock = -prices[day - 1] + getMaxProfitWithFee(day + 1, prices, 0, txnFee);
            int skipBuy = getMaxProfitWithFee(day + 1, prices, 1, txnFee);
            return Math.max(buyStock, skipBuy);
        }

        int sellStock = prices[day - 1] + getMaxProfitWithFee(day + 1, prices, 1, txnFee) - txnFee;
        int skipSell = getMaxProfitWithFee(day + 1, prices, 0, txnFee);
        return Math.max(sellStock, skipSell);
    }
}


//Better Approach

class Solution {
    private int[][] cache;

    public int maxProfit(int[] prices, int fee) {
        cache = new int[prices.length + 1][2];
        intializeCache();
        return getMaxProfitWithFee(1, prices, 1, fee);
    }

    private int getMaxProfitWithFee(int day, int[] prices, int canBuy, int txnFee) {
        if (day > prices.length) {
            return 0;
        }

        if (cache[day][canBuy] != -1) {
            return cache[day][canBuy];
        }

        if (canBuy == 1) {
            int buyStock = -prices[day - 1] + getMaxProfitWithFee(day + 1, prices, 0, txnFee);
            int skipBuy = getMaxProfitWithFee(day + 1, prices, 1, txnFee);
            return cache[day][canBuy] = Math.max(buyStock, skipBuy);
        }

        int sellStock = prices[day - 1] + getMaxProfitWithFee(day + 1, prices, 1, txnFee) - txnFee;
        int skipSell = getMaxProfitWithFee(day + 1, prices, 0, txnFee);
        return cache[day][canBuy] = Math.max(sellStock, skipSell);
    }

    private void intializeCache() {
        for (int i = 0; i < cache.length; i++) {
            Arrays.fill(cache[i], -1);
        }
    }
}


//Optimal Approach

//Naive Implementation 

class Solution {
    public int maxProfit(int[] prices, int txnFee) {
        /*
         * dp[day][canBuy][txnCount] represents the maximum profit achievable from day
         * 'day' to the last trading day under certain conditions:
         *
         * - If canBuy = 1, buying stock is allowed on that day. In this case, there are two choices:
         *    1. Buy the stock, incurring a cost equal to the stock's price.
         *    2. Skip buying, maintaining the current profit level.
         * 
         * - If canBuy = 0, buying is not allowed (meaning you may only sell on that day). Here, there are also two options:
         *   1. Sell the stock, adding the current stock price to your profit.
         *   2. Skip selling, keeping the profit unchanged from the previous day.
         */
        int[][] dp = new int[prices.length + 1][2];

        dp[prices.length][0] = dp[prices.length][1] = 0;

        for (int day = prices.length - 1; day >= 0; day--) {
            for (int canBuy = 0; canBuy <= 1; canBuy++) {
                int profit = 0;
                if (canBuy == 1) {
                    int buyStock = -prices[day] + dp[day + 1][0];
                    int skipBuy = dp[day + 1][1];
                    profit = Math.max(buyStock, skipBuy);
                } else {
                    int sellStock = prices[day] + dp[day + 1][1] - txnFee;
                    int skipSell = dp[day + 1][0];
                    profit = Math.max(sellStock, skipSell);
                }
                dp[day][canBuy] = profit;
            }
        }
        /*
         * Return the maximum profit obtainable starting from the first trading day 
         * with the option to buy. This ensures that all transactions are completed 
         * across the full trading period.
         */
        return dp[0][1];
    }
}


//Optimal Implementation 

class Solution {
    public int maxProfit(int[] prices, int txnFee) {
        int[][] dp = new int[prices.length + 1][2];

        dp[prices.length][0] = dp[prices.length][1] = 0;

        for (int day = prices.length - 1; day >= 0; day--) {
            for (int canBuy = 0; canBuy <= 1; canBuy++) {
                dp[day][1] = Math.max(-prices[day] + dp[day + 1][0], dp[day + 1][1]);
                dp[day][0] = Math.max(prices[day] + dp[day + 1][1] - txnFee, dp[day + 1][0]);
            }
        }

        return dp[0][1];
    }
}

//Aliter (Space optimised)

class Solution {
    public int maxProfit(int[] prices, int txnFee) {
        int[] currentDay = new int[2];
        int[] nextDay = new int[2];

        for (int day = prices.length - 1; day >= 0; day--) {
            for (int canBuy = 0; canBuy <= 1; canBuy++) {
                currentDay[1] = Math.max(-prices[day] + nextDay[0], nextDay[1]);
                currentDay[0] = Math.max(prices[day] + nextDay[1] - txnFee, nextDay[0]);
            }
            int[] temp = currentDay;
            currentDay = nextDay;
            nextDay = temp;
        }

        return nextDay[1];
    }
}

//Aliter (Further space optimised)

class Solution {
    public int maxProfit(int[] prices, int txnFee) {
        int[] dp = new int[2];

        for (int day = prices.length - 1; day >= 0; day--) {
            for (int canBuy = 0; canBuy <= 1; canBuy++) {
                dp[1] = Math.max(-prices[day] + dp[0], dp[1]);
                dp[0] = Math.max(prices[day] + dp[1] - txnFee, dp[0]);
            }
        }

        return dp[1];
    }
}
