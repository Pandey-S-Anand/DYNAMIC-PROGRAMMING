//Bruteforce Approach

class Solution {
    public int findNumberOfLIS(int[] arr) {
        return countAndLengthOfLIS(arr, 0, -1)[1]; // The second element in the result array holds the count of LIS
    }

    private int[] countAndLengthOfLIS(int[] arr, int index, int lastIncludedIdx) {
        /* 
          Base case: Once all elements have been processed (i.e., the array is exhausted),
          the LIS length is 0, and there is only one way to form the empty subsequence. 
        */
        if (index == arr.length) {
            return new int[] { 0, 1 }; 
        }

        int[] includeResult = new int[2];
        // Option 1: Include the current element, if it's larger than the last included element
        if (lastIncludedIdx == -1 || arr[lastIncludedIdx] < arr[index]) {
            int[] nextResult = countAndLengthOfLIS(arr, index + 1, index);
            /*
             * (countAndLengthOfLIS(arr, currentIndex + 1, arr[currentIndex])), it is returning two things:
             * 
             * nextResult[0]=The length of the LIS , starting from the current index onward. i.e from current index + 1
             * nextResult[1]=The number of such subsequences (of length nextResult[0])
             */
            includeResult[0] = 1 + nextResult[0];
            includeResult[1] = nextResult[1];
            /*
             * includeResult[0]= The length of the LIS starting from currentIndex will be 1 + nextResult[0], 
             * because we are adding the element arr[currentIndex] to the subsequences formed from currentIndex + 1. 
             * This increases the length by 1 compared to what we would get starting from currentIndex + 1.
             * 
             * includeResult[1]=The number of such subsequences (i.e of length  includeResult[0]) = nextResult[1]
             * It is the same as the count of subsequences that start from currentIndex + 1, i.e., nextResult[1], 
             * because the subsequences formed by including arr[currentIndex] will be the same as the ones formed 
             * by the subsequences from currentIndex + 1 â€” we're simply adding arr[currentIndex] to them.
             */
        }

        // Option 2: Exclude the current element
        int[] excludeResult = countAndLengthOfLIS(arr, index + 1, lastIncludedIdx);
        int[] result = new int[2]; // {LIS length, count}

        if (includeResult[0] > excludeResult[0]) {
            result[0] = includeResult[0];
            result[1] = includeResult[1];
        } else if (includeResult[0] < excludeResult[0]) {
            result[0] = excludeResult[0];
            result[1] = excludeResult[1];
        } else { // Both include and exclude give the same LIS length
            result[0] = includeResult[0];
            result[1] = includeResult[1] + excludeResult[1];
        }

        return result;
    }
}


//Better Approach

class Solution {
    private Map<String, int[]> cache;

    public int findNumberOfLIS(int[] arr) {
        cache = new HashMap<>();
        return countAndLengthOfLIS(arr, 0, -1)[1];
    }

    private int[] countAndLengthOfLIS(int[] arr, int index, int lastIncludedIdx) {
        if (index == arr.length) {
            return new int[] { 0, 1 };
        }

        String key = index + " , " + lastIncludedIdx;
        if (cache.containsKey(key)) {
            return cache.get(key);
        }

        int[] includeResult = new int[2];

        if (lastIncludedIdx == -1 || arr[lastIncludedIdx] < arr[index]) {
            int[] nextResult = countAndLengthOfLIS(arr, index + 1, index);

            includeResult[0] = 1 + nextResult[0];
            includeResult[1] = nextResult[1];
        }

        int[] excludeResult = countAndLengthOfLIS(arr, index + 1, lastIncludedIdx);
        int[] result = new int[2];

        if (includeResult[0] > excludeResult[0]) {
            result[0] = includeResult[0];
            result[1] = includeResult[1];
        } else if (includeResult[0] < excludeResult[0]) {
            result[0] = excludeResult[0];
            result[1] = excludeResult[1];
        } else {
            result[0] = includeResult[0];
            result[1] = includeResult[1] + excludeResult[1];
        }

        cache.put(key, result);
        return result;
    }
}

//Optimal approach

//Intuitive implementation

class Solution {
    public int findNumberOfLIS(int[] arr) {
        /*
         * dp[i] represents the length of longest increasing subsequences
         * that can be formed starting from index i to the end of array (arr.length-1)
         */
        int[] dp = new int[arr.length + 1];
        /*
         * count[i] represents the number of different longest increasing subsequences
         * that can be formed starting from index i to the end of array (arr.length-1)
         */
        int[] count = new int[arr.length + 1];

        /*
         * count[i] = 1 indicates there is one way to form a single-element subsequence
         * starting at index i, as each individual element is itself a valid increasing subsequence of length 1.
         */
        for (int i = 0; i <= arr.length; i++) {
            count[i] = 1;
        }

        for (int index = arr.length - 1; index >= 0; index--) {
            for (int lastIncludedIdx = index - 1; lastIncludedIdx >= -1; lastIncludedIdx--) {
                int include = 0;
                if (lastIncludedIdx == -1 || arr[lastIncludedIdx] < arr[index]) {
                    include = 1 + dp[index + 1];
                }

                int exclude = dp[lastIncludedIdx + 1];

                if (include > exclude) {
                    dp[lastIncludedIdx + 1] = include;
                    count[lastIncludedIdx + 1] = count[index + 1];
                } else if (exclude > include) {
                    dp[lastIncludedIdx + 1] = exclude;
                    count[lastIncludedIdx + 1] = count[lastIncludedIdx + 1];
                } else if ((include == exclude) && include != 0) {
                    /*
                     * The include != 0 check prevents us from counting empty subsequences. When
                     * both include and exclude are 0, it means we can't form a valid increasing
                     * subsequence at that position, so we shouldn't add those cases to our count.
                     */
                    dp[lastIncludedIdx + 1] = include;
                    count[lastIncludedIdx + 1] = count[lastIncludedIdx + 1] + count[index + 1];
                }
            }
        }

        return count[0];
    }
}

//Optimal implementation 

class Solution {
    public int findNumberOfLIS(int[] arr) {
        int[] dp = new int[arr.length + 1];
        int[] count = new int[arr.length + 1];

        for (int i = 0; i <= arr.length; i++) {
            count[i] = 1;
        }

        for (int index = arr.length - 1; index >= 0; index--) {
            for (int lastIncludedIdx = index - 1; lastIncludedIdx >= -1; lastIncludedIdx--) {
                int include = 0;
                if (lastIncludedIdx == -1 || arr[lastIncludedIdx] < arr[index]) {
                    include = 1 + dp[index + 1];
                }

                int exclude = dp[lastIncludedIdx + 1];

                if (include > exclude) {
                    dp[lastIncludedIdx + 1] = include;
                    count[lastIncludedIdx + 1] = count[index + 1];
                } else if ((include == exclude) && include != 0) {
                    dp[lastIncludedIdx + 1] = include;
                    count[lastIncludedIdx + 1] = count[lastIncludedIdx + 1] + count[index + 1];
                }
            }
        }

        return count[0];
    }
}
