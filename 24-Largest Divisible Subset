//Bruteforce approach

class Solution {
    // Track the maximum length of a divisible subset found
    private int maxSubsetLength;
    // Store the elements of the largest divisible subset found
    private List<Integer> largestDivisibleSubset;

    public List<Integer> largestDivisibleSubset(int[] arr) {
        maxSubsetLength = 0;
        generateLargestDivisibleSubset(arr, 0, new ArrayList<>());
        return largestDivisibleSubset;
    }

    private void generateLargestDivisibleSubset(int[] arr, int index, List<Integer> currentSubset) {
        if (index == arr.length) {
            if (currentSubset.size() > maxSubsetLength && isDivisibleSubset(currentSubset)) {
                largestDivisibleSubset = new ArrayList<>(currentSubset);
                maxSubsetLength = currentSubset.size();
            }
            return;
        }

        currentSubset.add(arr[index]);
        generateLargestDivisibleSubset(arr, index + 1, currentSubset);
        currentSubset.remove(currentSubset.size() - 1);
        generateLargestDivisibleSubset(arr, index + 1, currentSubset);
    }

    /*
     * This method checks if a subset is a valid divisible subset.
     * A subset is valid if every pair of elements (i, j) within it satisfies
     * either subset[i] % subset[j] == 0 or subset[j] % subset[i] == 0.
     */
    private boolean isDivisibleSubset(List<Integer> subset) {
        for (int i = 0; i < subset.size(); i++) {
            for (int j = i + 1; j < subset.size(); j++) {
                if ((subset.get(j) % subset.get(i)) != 0 && (subset.get(i) % subset.get(j)) != 0) {
                    return false; // Return false if any pair fails the divisibility check
                }
            }
        }

        return true; // Return true if all pairs satisfy divisibility conditions
    }
}


/*
Sorting plays a crucial role in ensuring that divisibility is maintained among elements of any particular subset:

For any indices i < j, if `arr[j]` is divisible by an earlier element `arr[i]`, 
then all factors of `arr[i]` that appear before it in the sorted array will also divide `arr[j]`. 
This order allows us to only check divisibility between consecutive elements in the sorted order,
rather than needing to verify divisibility between all pairs in a subset.

Example:
    arr: {2, 4, 8, 16, 32}
    Since 32 is divisible by 16, it will also be divisible by 8, 4, and 2 due to the sorted order.

Note: A subset doesn't necessarily need to maintain the original order of appearance from the input array.
      Any subset can be arranged in multiple configurations; however, one such configuration will form a subsequence.
      Therefore, the problem can be thought of as finding the longest divisible subsequence.
      
For example:
    arr: {1, 2, 3}
    
    Subsets:
        - {1}
        - {2}
        - {3}
        - {1, 2} or {2, 1} 
          (here, {1, 2} is both a subset and a subsequence, while {2, 1} is just a subset)
        - {1, 3} or {3, 1} 
          (here, {1, 3} is both a subset and a subsequence, while {3, 1} is just a subset)
        - {1, 2, 3}, {2, 1, 3}, {3, 1, 2}, {1, 3, 2}, {2, 3, 1}, {3, 2, 1}
          (only {1, 2, 3} is both a subset and a subsequence, while the rest are only subsets)
          
This means we are effectively searching for the longest divisible subsequence of elements in the sorted array.
*/

//Better Approach

class Solution {
    int maxSubsetLength;
    private List<Integer> largestDivisibleSubset;

    public List<Integer> largestDivisibleSubset(int[] arr) {
        maxSubsetLength = 0;
        Arrays.sort(arr);
        generateLargestDivisibleSubset(arr, 0, -1, new ArrayList<>());
        return largestDivisibleSubset;
    }

    private void generateLargestDivisibleSubset(int[] arr, int index, int lastIncludedIndex, List<Integer> currentSubset) {
        if (index == arr.length) {
            if (currentSubset.size() > maxSubsetLength) {
                maxSubsetLength = currentSubset.size();
                largestDivisibleSubset = new ArrayList<>(currentSubset);
            }
            return;
        }

        /*
         * Include arr[index] in the subset if it's divisible by the last included element.
         * lastIncludedIndex == -1 condition allows us to add the first element without any divisibility check.
         */
        if (lastIncludedIndex == -1 || (arr[index] % arr[lastIncludedIndex]) == 0) {
            currentSubset.add(arr[index]);
            generateLargestDivisibleSubset(arr, index + 1, index, currentSubset);
            currentSubset.remove(currentSubset.size() - 1);
        }
        // Exclude arr[index] and move to the next element.
        generateLargestDivisibleSubset(arr, index + 1, lastIncludedIndex, currentSubset);
    }
}


//Optimal Approach

class Solution {
    private List<Integer> longestDivisibleSubset;

    public List<Integer> largestDivisibleSubset(int[] arr) {
        Arrays.sort(arr);
        int[][] dp = new int[arr.length + 1][arr.length + 1];

        for (int index = arr.length - 1; index >= 0; index--) {
            for (int lastIncludedIdx = index - 1; lastIncludedIdx >= -1; lastIncludedIdx--) {
                int include = 0;
                if (lastIncludedIdx == -1 || (arr[index] % arr[lastIncludedIdx]) == 0) {
                    include = 1 + dp[index + 1][index + 1];
                }
                int exclude = dp[index + 1][lastIncludedIdx + 1];
                dp[index][lastIncludedIdx + 1] = Math.max(include, exclude);
            }
        }

        ArrayList<Integer> longestDivisibleSubsequence = new ArrayList<>();
        int lastIncludedIdx = -1;
        // dp[0][0] stores the length of the longest divisible subsequence (LDS)
        int currentLDSLength = dp[0][0]; // Target length of the LDS sequence to stop at

        for (int index = 0; index < arr.length; index++) {
            int include = 0;
            if (lastIncludedIdx == -1 || (arr[index] % arr[lastIncludedIdx]) == 0) {
                include = 1 + dp[index + 1][index + 1];
            }
            int exclude = dp[index + 1][lastIncludedIdx + 1];

            /*
             * The value dp[index][lastIncludedIdx + 1] stores the maximum possible length
             * of the LDS starting from index `index`. We can use this value to decide
             * whether to include the current element in our result. If including the element
             * contributes to forming the LDS, we add it to the result; otherwise, we skip it.
             */
            if (include >= exclude) {
                longestDivisibleSubsequence.add(arr[index]);
                lastIncludedIdx = index;
                currentLDSLength--; // Reduce the target LDS length by 1
                if (currentLDSLength == 0) {
                    break; // Stop once we've collected the full LDS
                }
            }
        }

        return longestDivisibleSubsequence;
    }
}
