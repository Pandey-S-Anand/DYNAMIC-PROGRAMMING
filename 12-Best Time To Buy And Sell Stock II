/*
You cannot hold multiple stocks at the same time. At the start, you are allowed to buy a stock because you currently do not own any.

On any given day when you have the option to buy, you have two choices:

Buy the stock: If you choose to buy on that day, you will not be able to buy again until you sell the stock you just acquired.
In this case, you should account for the purchase as a negative value (since profit is calculated as sell price minus buy price).
Not buy the stock: If you decide not to buy, you still retain the option to purchase the stock on a future day.

On any given day when you donot have the option to buy the stock(it means you already hold a stock.), In this situation, you also have two options:

Sell the stock: If you choose to sell on that day, you can then buy a stock again in the future.
You would add the selling price as a positive value (since profit is calculated as sell price minus buy price).
Not sell the stock: If you choose not to sell, you cannot buy any other stock until you sell the one you currently hold.


When we reach the end of the index, In this case, the maximum profit will be 0, as there are no more days left to make any trades.
*/

//Bruteforce Approach

class Solution {
    public int maxProfit(int[] prices) {
        return calculateMaxProfit(1, prices, true);
    }

    private int calculateMaxProfit(int day, int[] prices, boolean canBuy) {
        if (day > prices.length) {
            return 0;
        }

        if (canBuy) {
            int buyStock = -prices[day - 1] + calculateMaxProfit(day + 1, prices, false);
            int skipBuy = calculateMaxProfit(day + 1, prices, true);
            return Math.max(buyStock, skipBuy);
        }

        int sellStock = prices[day - 1] + calculateMaxProfit(day + 1, prices, true);
        int skipSell = calculateMaxProfit(day + 1, prices, false);
        return Math.max(sellStock, skipSell);
    }
}


//Better Approach

class Solution {
    private int[][] cache;

    public int maxProfit(int[] prices) {
        cache = new int[prices.length + 1][2];
        intializeCache();
        return calculateMaxProfit(1, prices, 1);
    }

    private int calculateMaxProfit(int day, int[] prices, int canBuy) {
        if (day > prices.length) {
            return 0;
        }

        if (cache[day][canBuy] != -1) {
            return cache[day][canBuy];
        }

        if (canBuy == 1) {
            int buyStock = -prices[day - 1] + calculateMaxProfit(day + 1, prices, 0);
            int skipBuy = calculateMaxProfit(day + 1, prices, 1);
            return cache[day][canBuy] = Math.max(buyStock, skipBuy);
        }

        int sellStock = prices[day - 1] + calculateMaxProfit(day + 1, prices, 1);
        int skipSell = calculateMaxProfit(day + 1, prices, 0);
        return cache[day][canBuy] = Math.max(sellStock, skipSell);
    }

    private void intializeCache() {
        for (int i = 0; i < cache.length; i++) {
            Arrays.fill(cache[i], -1);
        }
    }
}


//Optimal Approach

//Naive Implementation 

class Solution {
    public int maxProfit(int[] prices) {
        /*
         * dp[day][canBuy] represents the maximum profit achievable from the current
         * day (i.e., 'day') up to the last day (prices.length - 1) given the following condition:
         *
         * - If canBuy = 1: This indicates that we are allowed to buy stock on the current day. We have two choices:
         * 1. Buy the stock: This will decrease our profit by the current stock price (incurs a cost) and switch us to a state where we cannot buy (canBuy = 0) on the next day.
         * 2. Skip buying the stock: This keeps our current profit unchanged and allows us to consider buying on the next day.
         *
         * - If canBuy = 0: This means we are only allowed to sell the stock on the current day. Here, we also have two choices:
         * 1. Sell the stock: This will increase our profit by the current stock price. Following a sale, there is a 1-day cooldown period,
         *.   which means we can  only buy again (canBuy = 1) after skipping the next day.
         * 2. Skip selling the stock: This keeps our profit as it was the previous day, 
         *.   allowing us to reconsider selling on the next day.
         */
        int[][] dp = new int[prices.length + 1][2];

        dp[prices.length][0] = dp[prices.length][1] = 0;

        for (int day = prices.length - 1; day >= 0; day--) {
            for (int canBuy = 0; canBuy <= 1; canBuy++) {
                int profit = 0;
                if (canBuy == 1) {
                    int buyStock = -prices[day] + dp[day + 1][0];
                    int skipBuy = dp[day + 1][1];
                    profit = Math.max(buyStock, skipBuy);
                } else {
                    int sellStock = prices[day] + dp[day + 1][1];
                    int skipSell = dp[day + 1][0];
                    profit = Math.max(sellStock, skipSell);
                }
                dp[day][canBuy] = profit;
            }
        }
        /*
         * Return the maximum profit obtainable starting from the first day to the last
         * trading day, with the option to buy. This indicates that you have the
         * opportunity to buy at the end of the trading days, reflecting the completion of all transactions up to that point.
         */
        return dp[0][1];
    }
}


//Optimal Implementation

class Solution {
    public int maxProfit(int[] prices) {
        int[][] dp = new int[prices.length + 1][2];

        for (int day = prices.length - 1; day >= 0; day--) {
            dp[day][1] = Math.max(-prices[day] + dp[day + 1][0], dp[day + 1][1]);
            dp[day][0] = Math.max(prices[day] + dp[day + 1][1], dp[day + 1][0]);
        }

        return dp[0][1];
    }
}


//Aliter (space optimised)

class Solution {
    public int maxProfit(int[] prices) {
        int[] currentDay = new int[2];
        int[] nextDay = new int[2];

        for (int day = prices.length - 1; day >= 0; day--) {
            currentDay[1] = Math.max(-prices[day] + nextDay[0], nextDay[1]);
            currentDay[0] = Math.max(prices[day] + nextDay[1], nextDay[0]);

            int[] temp = currentDay;
            currentDay = nextDay;
            nextDay = temp;
        }

        return nextDay[1];
    }
}


//Aliter (further space optimised)

class Solution {
    public int maxProfit(int[] prices) {
        int[] dp = new int[2];

        for (int day = prices.length - 1; day >= 0; day--) {
            dp[1] = Math.max(-prices[day] + dp[0], dp[1]);
            dp[0] = Math.max(prices[day] + dp[1], dp[0]);
        }

        return dp[1];
    }
}
