//Bruteforce Approach

//Naive Implementation 

class Solution {
    static Boolean isSubsetSum(int n, int arr[], int targetSum) {
        return hasSubsetWithTargetSum(arr, n, targetSum);
    }

    private static boolean hasSubsetWithTargetSum(int[] arr, int n, int targetSum) {
        List<List<Integer>> subsets = new ArrayList<>();
        subsets.add(new ArrayList<>());

        for (int i = 0; i < n; i++) {
            int size = subsets.size();
            for (int j = 0; j < size; j++) {
                List<Integer> currentSubset = new ArrayList<>(subsets.get(j));
                currentSubset.add(arr[i]);
                if (findSubsetSum(currentSubset) == targetSum) {
                    return true;
                }
                subsets.add(currentSubset);
            }
        }

        return false;
    }

    private static int findSubsetSum(List<Integer> subset) {
        int subsetSum = 0;
        for (int val : subset) {
            subsetSum += val;
        }
        return subsetSum;
    }
}


//Optimal Implementation 

class Solution {
    static Boolean isSubsetSum(int n, int arr[], int targetSum) {
        return hasSubsetWithTargetSum(arr, n, targetSum);
    }

    private static boolean hasSubsetWithTargetSum(int[] arr, int n, int targetSum) {
        // Set to store the sums of all subsets found so far, starting with the empty subset sum of 0
        Set<Integer> subsetsSum = new HashSet<>();
        subsetsSum.add(0);

        for (int i = 0; i < n; i++) {
            Set<Integer> existingSubsetsSum = new HashSet<>(subsetsSum);
            for (int subsetSum : existingSubsetsSum) {
                int newSubsetSum = subsetSum + arr[i];

                if (newSubsetSum == targetSum) {
                    return true;
                }
                /*
                 * Add the new subset sum to the set if it is less than the target sum
                 * This helps keep track of all valid subset sums that could potentially match the target.
                 */

                if (newSubsetSum < targetSum) {
                    subsetsSum.add(newSubsetSum);
                }
            }
        }

        return false;
    }
}



//Improved Approach

class Solution {
    static Boolean isSubsetSum(int n, int arr[], int targetSum) {
        return hasSubsetWithTargetSum(arr, n, targetSum);
    }

    private static boolean hasSubsetWithTargetSum(int[] arr, int n, int targetSum) {
        int currentSubsetSum = 0;
        int totalSubsets = 1 << n; // x << y = x * 2^n

        for (int num = 0; num < totalSubsets; num++) {
            for (int i = 0; i < n; i++) {
                if ((num & (1 << i)) != 0) {
                    currentSubsetSum += arr[i];

                    /*
                     * If current subset sum exceeds targetSum, no need to continue
                     * Since the array only contains positive elements, further additions will never give the desired target
                     */
                    if (currentSubsetSum > targetSum) {
                        break;
                    }
                }
            }

            if (currentSubsetSum == targetSum) {
                return true;
            }

            currentSubsetSum = 0;
        }

        return false;
    }
}



//Good Approach

class Solution {
    static Boolean isSubsetSum(int arr[], int targetSum) {
        return hasSubsetWithTargetSum(arr, 0, targetSum);
    }

    private static boolean hasSubsetWithTargetSum(int[] arr, int index, int targetSum) {
        /*
         * Base case: If we've exhauated the array (index == arr.length),
         * check if the target sum is zero. If it is, we have found a valid subset
         * that adds up to the target sum, so return true. Otherwise, 
         * return false to indicate no valid subset was found for this path.
         */
        if (index == arr.length) {
            return targetSum == 0;
        }
        
         /*
         * If the current element is greater than the target sum, we cannot include it in the subset.
         * Including this element would reduce the target sum to a negative value, which is not achievable.
         * According to the problem constraints, both the array elements and the target
         * sum are positive.Therefore, once the target sum becomes negative, it cannot return to a
         * non-negative value, so this path can safely be ignored.
         * This check prevents unnecessary recursive calls, improving the efficiency of the algorithm.
         */
        // Option 1: Include the current element (only if it's not greater than the targetSum)
        if (targetSum >= arr[index] && hasSubsetWithTargetSum(arr, index + 1, targetSum - arr[index])) {
           return true;
        }

        // Option 2: Exclude the current element
        return hasSubsetWithTargetSum(arr, index + 1, targetSum);
    }
}


//Better Approach

class Solution {
    private static int[][] cache;

    static Boolean isSubsetSum(int arr[], int targetSum) {
        cache = new int[arr.length][targetSum + 1];
        intializeCache();
        return hasSubsetWithTargetSum(arr, 0, targetSum);
    }

    private static boolean hasSubsetWithTargetSum(int[] arr, int index, int targetSum) {
        if (index == arr.length) {
            return targetSum == 0;
        }

        if (cache[index][targetSum] != -1) {
            return cache[index][targetSum] == 1;
        }

        if (targetSum >= arr[index] && hasSubsetWithTargetSum(arr, index + 1, targetSum - arr[index])) {
            cache[index][targetSum] = 1;
            return true;
        }

        cache[index][targetSum] = hasSubsetWithTargetSum(arr, index + 1, targetSum) ? 1 : 0;
        return cache[index][targetSum] == 1;
    }

    private static void intializeCache() {
        for (int i = 0; i < cache.length; i++) {
            Arrays.fill(cache[i], -1);
        }
    }
}


//Optimal Approach

//Naive Implementation

class Solution {
    static Boolean isSubsetSum(int arr[], int targetSum) {
        // dp[i][j] represents whether it is possible to achieve a target sum of j using the subarray [i..arr.length-1]
        boolean[][] dp = new boolean[arr.length+1][targetSum + 1];

        dp[arr.length][0] = true;

        for (int sum = targetSum; sum > 0; sum--) {
            dp[arr.length][sum] = false;
        }

        for (int index = arr.length - 1; index >= 0; index--) {
            for (int sum = targetSum; sum >= 0; sum--) {
                if (sum >= arr[index] && dp[index + 1][sum - arr[index]]) {
                    dp[index][sum] = true;
                } else {
                    dp[index][sum] = dp[index + 1][sum];
                }
            }
        }

        return dp[0][targetSum];
    }
}


//Optimal Implementation 

class Solution {
    static Boolean isSubsetSum(int arr[], int targetSum) {
        boolean[][] dp = new boolean[arr.length+1][targetSum + 1];

        dp[arr.length][0] = true;

        for (int index = arr.length - 1; index >= 0; index--) {
            for (int sum = targetSum; sum >= 0; sum--) {
                if (sum >= arr[index] && dp[index + 1][sum - arr[index]]) {
                    dp[index][sum] = true;
                } else {
                    dp[index][sum] = dp[index + 1][sum];
                }
            }

            // Early exit: If targetSum is achievable at this point, return true immediately.
            if(dp[index][targetSum]){
                return true;
            }
        }

        return dp[0][targetSum];
    }
}


//Aliter (Space optimized)

class Solution {
    static Boolean isSubsetSum(int arr[], int targetSum) {
        boolean[] currentRow = new boolean[targetSum + 1];
        boolean[] nextRow = new boolean[targetSum + 1];

        nextRow[0] = true;

        for (int index = arr.length - 1; index >= 0; index--) {
            for (int sum = targetSum; sum >= 0; sum--) {
                if (sum >= arr[index] && nextRow[sum - arr[index]]) {
                    currentRow[sum] = true;
                } else {
                    currentRow[sum] = nextRow[sum];
                }
            }
            
            if(currentRow[targetSum]){
                return true;
            }

            boolean[] temp = currentRow;
            currentRow = nextRow;
            nextRow = temp;
        }

        return nextRow[targetSum];
    }
}


//Aliter (further space optimised)

class Solution {
    static Boolean isSubsetSum(int arr[], int targetSum) {
        boolean[] currentRow = new boolean[targetSum + 1];
        boolean[] nextRow = new boolean[targetSum + 1];
        
        nextRow[0] = true;

        for (int index = arr.length - 1; index >= 0; index--) {
            for (int sum = targetSum; sum >= 0; sum--) {
                if (sum >= arr[index] && nextRow[sum - arr[index]]) {
                    nextRow[sum] = true;
                } else {
                    nextRow[sum] = nextRow[sum];
                }
            }
            
            if(nextRow[targetSum]){
                return true;
            }
        }

        return nextRow[targetSum];
    }
}
