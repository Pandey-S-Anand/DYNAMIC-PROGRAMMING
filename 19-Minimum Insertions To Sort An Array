/*
 * The LIS (Longest Increasing Subsequence) of an array represents the longest subsequence 
 * of elements that are already in increasing order. Each step allows us to remove an element 
 * and insert it into a different position to achieve a fully sorted array.
 * 
 * To minimize the number of steps, we should move the fewest elements possible. 
 * Since the LIS is the longest subsequence that maintains relative order, it ensures 
 * the least number of elements need to be moved. Using the LIS guarantees the minimum 
 * number of steps required to sort the array.
 * 
 * If the length of the array is N and the length of the LIS is L, then the minimum number 
 * of steps needed to sort the array is:
 * 
 * Steps = N - L
 */

//Bruteforce Approach

class Solution{
    private int maxLISLength;
    
    public int minInsertions(int arr[], int n) { 
       return n-lengthOfLIS(arr);
	} 
        
    private int lengthOfLIS(int[] arr) {
        maxLISLength = 0;
        generateAllSubsequences(arr, 0, new ArrayList<>());
        return maxLISLength;
    }

    private void generateAllSubsequences(int[] arr, int index, List<Integer> currentSubsequence) {
        if (index == arr.length) {
            if (isIncreasingSubsequence(currentSubsequence) && currentSubsequence.size() > maxLISLength) {
                maxLISLength = currentSubsequence.size();
            }
            return;
        }

        currentSubsequence.add(arr[index]);
        generateAllSubsequences(arr, index + 1, currentSubsequence);
        currentSubsequence.remove(currentSubsequence.size() - 1);
        generateAllSubsequences(arr, index + 1, currentSubsequence);
    }

    private boolean isIncreasingSubsequence(List<Integer> subsequence) {
        for (int i = 1; i < subsequence.size(); i++) {
            if (subsequence.get(i) < subsequence.get(i - 1)) {
                return false;
            }
        }

        return true;
    }
}


//Improved Approach

class Solution {
    public int minInsertions(int arr[], int n) {
        return n - lengthOfLIS(arr, 0, -1);
    }

    private int lengthOfLIS(int[] arr, int index, int lastIncludedIdx) {
        if (index == arr.length) {
            return 0;
        }

        // Option 1: Include the current element in the subsequence (if it creates an increasing order)
        int include = 0;
        /*
         * Check if the current element is either the first element of the subsequence
         * (lastIncludedIdx == -1) or greater than or equal to the last included element in the current subsequence.
         * 
         * lastIncludedIdx = -1 is used as a base case to indicate no prior element in
         * the subsequence, allowing any element to start a new subsequence.
         * 
         * For other values, lastIncludedIdx can only take values from -1 up to one less than the current index
         */
        if (lastIncludedIdx == -1 || arr[lastIncludedIdx] <= arr[index]) {
            include = 1 + lengthOfLIS(arr, index + 1, index);
        }

        // Option 2: Exclude the current element and move to the next index
        int exclude = lengthOfLIS(arr, index + 1, lastIncludedIdx);

        // Return the maximum length of LIS obtained by either including or excluding the current element
        return Math.max(include, exclude);
    }
}


//Good Approach

class Solution {
    private int[][] cache;

    public int minInsertions(int arr[], int n) {
        cache = new int[n][n];
        intializeCache();
        return n - lengthOfLIS(arr, 0, -1);
    }

    private int lengthOfLIS(int[] arr, int index, int lastIncludedIdx) {
        if (index == arr.length) {
            return 0;
        }

        if (cache[index][lastIncludedIdx + 1] != -1) {
            return cache[index][lastIncludedIdx + 1];
        }

        int include = 0;
        if (lastIncludedIdx == -1 || arr[lastIncludedIdx] <= arr[index]) {
            include = 1 + lengthOfLIS(arr, index + 1, index);
        }

        int exclude = lengthOfLIS(arr, index + 1, lastIncludedIdx);

        return cache[index][lastIncludedIdx + 1] = Math.max(include, exclude);
    }

    private void intializeCache() {
        for (int i = 0; i < cache.length; i++) {
            Arrays.fill(cache[i], -1);
        }
    }
}

//Better Approach

class Solution {
    public int minInsertions(int arr[], int n) {
        return n - lengthOfLIS(arr);
    }

    private int lengthOfLIS(int[] arr) {
        int[][] dp = new int[arr.length + 1][arr.length + 1];

        dp[arr.length][0] = 0;

        for (int index = arr.length - 1; index >= 0; index--) {
            for (int lastIncludedIdx = index - 1; lastIncludedIdx >= -1; lastIncludedIdx--) {
                int include = 0;
                if (lastIncludedIdx == -1 || arr[lastIncludedIdx] <= arr[index]) {
                    include = 1 + dp[index + 1][index + 1];
                }

                int exclude = dp[index + 1][lastIncludedIdx + 1];

                dp[index][lastIncludedIdx + 1] = Math.max(include, exclude);
            }
        }

        return dp[0][0];
    }
}


//Aliter (space optimised)

class Solution {
    public int minInsertions(int arr[], int n) {
        return n - lengthOfLIS(arr);
    }

    private int lengthOfLIS(int[] arr) {
        int[] currentRow = new int[arr.length + 1];
        int[] nextRow = new int[arr.length + 1];

        for (int index = arr.length - 1; index >= 0; index--) {
            for (int lastIncludedIdx = index - 1; lastIncludedIdx >= -1; lastIncludedIdx--) {
                int include = 0;
                if (lastIncludedIdx == -1 || arr[lastIncludedIdx] <= arr[index]) {
                    include = 1 + nextRow[index + 1];
                }

                int exclude = nextRow[lastIncludedIdx + 1];

                currentRow[lastIncludedIdx + 1] = Math.max(include, exclude);
            }
            int[] temp = currentRow;
            currentRow = nextRow;
            nextRow = temp;
        }

        return nextRow[0];
    }
}

//Aliter (Further space optimised)

class Solution {
    public int minInsertions(int arr[], int n) {
        return n - lengthOfLIS(arr);
    }

    private int lengthOfLIS(int[] arr) {
        int[] nextRow = new int[arr.length + 1];

        for (int index = arr.length - 1; index >= 0; index--) {
            for (int lastIncludedIdx = index - 1; lastIncludedIdx >= -1; lastIncludedIdx--) {
                int include = 0;
                if (lastIncludedIdx == -1 || arr[lastIncludedIdx] <= arr[index]) {
                    include = 1 + nextRow[index + 1];
                }

                int exclude = nextRow[lastIncludedIdx + 1];

                nextRow[lastIncludedIdx + 1] = Math.max(include, exclude);
            }
        }

        return nextRow[0];
    }
}


//Alternate DP approach

class Solution {
    public int minInsertions(int arr[], int n) {
        return n - lengthOfLIS(arr);
    }

    private int lengthOfLIS(int[] arr) {
        int[] dp = new int[arr.length];
        int overallMaxLengthLIS = 0;

        for (int i = 0; i < arr.length; i++) {
            int maxLISLengthEndingBeforeI = 0;
            for (int j = 0; j < i; j++) {
                if (arr[i] >= arr[j]) {
                    maxLISLengthEndingBeforeI = Math.max(maxLISLengthEndingBeforeI, dp[j]);
                }
            }
            dp[i] = maxLISLengthEndingBeforeI + 1;
        }

        for (int i = 0; i < arr.length; i++) {
            overallMaxLengthLIS = Math.max(overallMaxLengthLIS, dp[i]);
        }

        return overallMaxLengthLIS;
    }
}


//Optimal Approach

class Solution {
    public int minInsertions(int arr[], int n) {
        return n - lengthOfLIS(arr);
    }

    public int lengthOfLIS(int[] arr) {
        List<Integer> tail = new ArrayList<>(arr.length);

        for (int num : arr) {
            int index = upperBound(tail, num);

            if (index == tail.size()) {
                tail.add(num);
            } else {
                tail.set(index, num);
            }
        }

        return tail.size();
    }

    private int upperBound(List<Integer> arr, int x) {
        int low = 0, high = arr.size() - 1, upperBound = arr.size();

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr.get(mid) > x) {
                upperBound = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return upperBound;
    }
}

//Aliter

class Solution {
    public int minInsertions(int arr[], int n) {
        return n - lengthOfLIS(arr);
    }

    private int lengthOfLIS(int[] arr) {
        int[] tail = new int[arr.length];
        int length = 0;

        for (int num : arr) {
            int index = upperBound(tail, length, num);

            if (index == length) {
                length++;
            }

            tail[index] = num;
        }

        return length;
    }

    private int upperBound(int[] arr, int n, int x) {
        int low = 0, high = n - 1, upperBound = n;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] > x) {
                upperBound = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return upperBound;
    }
}
