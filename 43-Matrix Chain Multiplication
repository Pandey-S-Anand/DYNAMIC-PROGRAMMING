/*
 * Two matrices can be multiplied if and only if the number of columns 
 * in the first matrix is equal to the number of rows in the second matrix.
 * 
 * Let the matrices be:
 * Matrix A with dimensions m × n: m rows and n columns.
 * Matrix B with dimensions p × q: p rows and q columns.
 * 
 * Resultant Matrix:
 * If Matrix A (of size m × n) is multiplied with B (of size p × q) 
 * (where n = p), the resulting matrix C = A × B will have dimensions 
 * m × q (i.e., m rows and q columns).
 * 
 * The total number of multiplication operations required will be: m * n (or p) * q
 */

//Bruteforce Approach

class Solution {
    static int matrixMultiplication(int arr[]) {
        /*
         * Call the helper function with the full range of matrices (from the first matrix to the last matrix).
         * The matrix dimensions are represented by arr[i-1] x arr[i] for matrix i.
         * 
         * NOTE:
         * If the array is of size 'n', then the number of possible matrices to multiply will be n-1.
         * For example, if arr = {10, 30, 5, 60}, then the matrices represented are:
         * Matrix 1: 10×30
         * Matrix 2: 30×5
         * Matrix 3: 5×60
         * Total matrices = 4 - 1 = 3.
         */
        return minOperations(arr, 1, arr.length - 1);
    }

    private static int minOperations(int arr[], int start, int end) {
        // Base case: When there is only one matrix in the chain, no multiplication is needed.
        if (start == end) {
            return 0;
        }

        int minimumMultiplicationCost = Integer.MAX_VALUE;
        /*
         * Matrix Chain Multiplication (MCM) Problem:
         * Given 4 matrices with the following dimensions:
         * Matrix 1: A of size 10×30 (10 rows, 30 columns)
         * Matrix 2: B of size 30×5 (30 rows, 5 columns)
         * Matrix 3: C of size 5×60 (5 rows, 60 columns)
         * Matrix 4: D of size 60×80 (60 rows, 80 columns)
         *
         * We will have the following partitions:
         *
         * 1. Partition 1: A × (B × C × D)
         * - Step 1: Multiply B (30×5), C (5×60), and D (60×80):
         * B×C results in a 30×60 matrix.
         * (B×C)×D results in a 30×80 matrix.
         * Multiplication Cost = 30×5×60 + 30×60×80 = 9000 + 144000 = 153000
         * - Step 2: Multiply A (10×30) with the result of (B×C×D) (30×80):
         * Multiplication Cost = 10×30×80 = 24000
         * - Total Multiplication Cost for Partition = 153000 + 24000 = 177000
         * 
         * 2. Partition 2: (A × B) × (C × D)
         * - Step 1: Multiply A (10×30) and B (30×5):
         * Multiplication Cost = 10×30×5 = 1500
         * Resulting matrix is 10×5.
         * - Step 2: Multiply C (5×60) and D (60×80):
         * Multiplication Cost = 5×60×80 = 24000
         * Resulting matrix is 5×80.
         * - Step 3: Multiply (A×B) (10×5) with (C×D) (5×80):
         * Multiplication Cost = 10×5×80 = 4000
         * - Total Multiplication Cost for Partition 2 = 1500 + 24000 + 4000 = 29500
         * 
         * 3. Partition 3: (A × B × C) × D
         * - Step 1: Multiply A (10×30), B (30×5), and C (5×60):
         * Multiplication Cost = 10×30×5 + 10×5×60 = 1500 + 3000 = 4500
         * Resulting matrix is 10×60.
         * - Step 2: Multiply (A×B×C) (10×60) with D (60×80):
         * Multiplication Cost = 10×60×80 = 48000
         * - Total Multiplication Cost for Partition 3 = 4500 + 48000 = 52500
         * 
         * Summary of Multiplication Costs:
         * 1. (A × (B × C × D)) → Total cost = 177000
         * 2. ((A × B) × (C × D)) → Total cost = 29500
         * 3. ((A × B × C) × D) → Total cost = 52500
         * 
         * Optimal Order:
         * The optimal way to multiply these matrices is (A × B) × (C × D), which gives the minimum multiplication cost of 29500 operations.
         */

        // Iterate through all possible partitions to find the optimal way of multiplying.
        for (int partition = start; partition < end; partition++) {
            /*
             * NOTE:
             * In Partition 2: (A × B) × (C × D), the recursive approach helps break down
             * the matrix multiplication into smaller subproblems:
             * 
             * Step 1: Multiply A (10×30) and B (30×5):
             * - This is done by the recursive call minOperations(arr, start, partition).
             * - The multiplication cost is calculated as: 10×30×5 = 1500.
             * - The resulting matrix has dimensions 10×5.
             * 
             * Step 2: Multiply C (5×60) and D (60×80):
             * - This is done by the recursive call minOperations(arr, partition + 1, end).
             * - The multiplication cost is calculated as: 5×60×80 = 24000.
             * - The resulting matrix has dimensions 5×80.
             * 
             * Step 3: Multiply the result of (A×B) (10×5) with the result of (C×D) (5×80):
             * - The multiplication cost is calculated as: 10×5×80 = 4000.
             * - This step is handled by the following code: arr[start - 1] * arr[partition] * arr[end].
             */

            int multiplicationCost = arr[start - 1] * arr[partition] * arr[end] + minOperations(arr, start, partition) + minOperations(arr, partition + 1, end);
            minimumMultiplicationCost = Math.min(minimumMultiplicationCost, multiplicationCost);
        }

        // Return the minimum multiplication cost for the current subproblem.
        return minimumMultiplicationCost;
    }
}


//Better Approach

class Solution {
    private static int[][] cache;

    static int matrixMultiplication(int arr[]) {
        cache = new int[arr.length][arr.length];
        intializeCache();
        return minOperations(arr, 1, arr.length - 1);
    }

    private static int minOperations(int arr[], int start, int end) {
        if (start == end) {
            return 0;
        }

        if (cache[start][end] != -1) {
            return cache[start][end];
        }

        int minimumMultiplicationCost = Integer.MAX_VALUE;
        for (int partition = start; partition < end; partition++) {
            int multiplicationCost = arr[start - 1] * arr[partition] * arr[end] + minOperations(arr, start, partition) + minOperations(arr, partition + 1, end);
            minimumMultiplicationCost = Math.min(minimumMultiplicationCost, multiplicationCost);
        }

        return cache[start][end] = minimumMultiplicationCost;
    }

    private static void intializeCache(){
        for(int i=0;i<cache.length;i++){
            Arrays.fill(cache[i],-1);
        }
    }
}


//Optimal Approach

//Intuitive implementation

class Solution {
    static int matrixMultiplication(int[] arr) {
        int n = arr.length;
        int[][] dp = new int[n][n]; // dp[i][j] represents the minimum multiplication cost for matrices from i to j

        
        for(int start=n-1;start>=1;start--){
            for(int end=start;end<n;end++){
                if(start==end){
                    dp[start][end]=0; // If the start index is the same as the end index, it means we're working with a single matrix, so no multiplication cost.
                }else{
                   int minimumMultiplicationCost=Integer.MAX_VALUE;
                   for(int partition=start;partition<end;partition++){
                        int multiplicationCost = arr[start - 1] * arr[partition] * arr[end] + dp[start][partition] + dp[partition + 1][end];
                        minimumMultiplicationCost = Math.min(minimumMultiplicationCost, multiplicationCost);
                   }
                   dp[start][end]=minimumMultiplicationCost;
                }
                
            }
        }
         // The final answer will be the minimum cost to multiply matrices from 1 to n-1
        return dp[1][n-1];
    }
}


//Optimal implementation

class Solution {
    static int matrixMultiplication(int[] arr) {
        int n = arr.length;
        int[][] dp = new int[n][n];

        for (int start = n - 1; start >= 1; start--) {
            for (int end = start + 1; end < n; end++) {
                int minimumMultiplicationCost = Integer.MAX_VALUE;
                for (int partition = start; partition < end; partition++) {
                    int multiplicationCost = arr[start - 1] * arr[partition] * arr[end] + dp[start][partition] + dp[partition + 1][end];
                    minimumMultiplicationCost = Math.min(minimumMultiplicationCost, multiplicationCost);
                }
                dp[start][end] = minimumMultiplicationCost;
            }
        }
        return dp[1][n - 1];
    }
}
